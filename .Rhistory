<<<<<<< Updated upstream
=======
install.packages("missMDA")
---
title: "Load Data"
author: "Sergio, Guillem"
date: "14 de febrero de 2019"
output:
word_document:
toc: yes
toc_depth: '3'
pdf_document:
number_sections: yes
toc: yes
toc_depth: '3'
html_document:
number_sections: yes
toc: yes
toc_depth: 3
editor_options:
chunk_output_type: console
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
# Presentation
## R Markdowns document
This is an R Markdown document.
We are showing some examples of EDA. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>. Use * to provide emphasis such as *italics* and **bold**.
Create lists: Unordered * and +     or   ordered   1. 2.
1. Item 1
2. Item 2
+ Item 2a
+ Item 2b
clc
clear
clean
---
title: "Load Data"
author: "Sergio, Guillem"
date: "14 de febrero de 2019"
output:
word_document:
toc: yes
toc_depth: '3'
pdf_document:
number_sections: yes
toc: yes
toc_depth: '3'
html_document:
number_sections: yes
toc: yes
toc_depth: 3
editor_options:
chunk_output_type: console
---
---
title: "Load Data"
author: "Me"
date: "14 de febrero de 2019"
output:
word_document:
toc: yes
toc_depth: '3'
pdf_document:
number_sections: yes
toc: yes
toc_depth: '3'
html_document:
number_sections: yes
toc: yes
toc_depth: 3
editor_options:
chunk_output_type: console
---
# Presentation
## R Markdowns document
This is an R Markdown document.
We are showing some examples of EDA. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>. Use * to provide emphasis such as *italics* and **bold**.
Create lists: Unordered * and +     or   ordered   1. 2.
1. Item 1
2. Item 2
+ Item 2a
+ Item 2b
```{r, include=FALSE}
>>>>>>> Stashed changes
# Load Required Packages: to be increased over the course
requiredPackages <- c("car","knitr","FactoMineR","missMDA","mvoutlier","chemometrics")
missingPackages <- requiredPackages[!(requiredPackages %in% installed.packages()[,"Package"])]
if(length(missingPackages)) install.packages(missingPackages)
<<<<<<< Updated upstream
#setwd("C:/Users/Sergio/Dropbox/UPC/FIB/Analisis de datos y explotacion de la informacion (ADEI)/Proyecto/")
#setwd("C:/Users/GUILLEM/Documents/ADEI/FIB-ADEI-Big-Data-Analysis")
setwd("C:/Users/usuario/Documents/ADEI/FIB-ADEI-Big-Data-Analysis")
load("set-datos.RData", envir = parent.frame(), verbose = FALSE)
#Comprobar el tamaño de la muestra
dim(df)
# Graphics
=======
lapply(requiredPackages, require, character.only = TRUE)
#setwd("C:\Users\Sergio\Dropbox\UPC\FIB\Analisis de datos y explotacion de la informacion (ADEI)\bank-additional")
dirwd<-"C:\Users\Sergio\Dropbox\UPC\FIB\Analisis de datos y explotacion de la informacion (ADEI)\bank-additional"
#setwd("C:/Users/Sergio/Dropbox/UPC/FIB/Analisis de datos y explotacion de la informacion (ADEI)/bank-additional")
dirwd<-"C:/Users/Sergio/Dropbox/UPC/FIB/Analisis de datos y explotacion de la informacion (ADEI)/bank-additional"
df<-read.table(paste0(dirwd,"/bank-additional-full.csv"),header=TRUE,sep=";")
head(df)
nrow(df)
ncol(df)
dim(df)
set.seed(19101990)
llista<-sample(size=5000,x=1:nrow(df),replace=FALSE)
llista<-sort(llista)
# Access row
df[3:5,]
df[,5]
df[c(1,3,5),c(2,4)]
df<-df[llista,]
save.image("C:/Users/Sergio/Dropbox/UPC/FIB/Analisis de datos y explotacion de la informacion (ADEI)/bank-additional/sss.RData")
>>>>>>> Stashed changes
names(df)
# Overview of data frame
summary(df)
hist(df$duration)
hist(df$duration,freq=FALSE)
hist(df$duration,col="cyan")
hist(df$duration,col="cyan",main="Duration - Histogram")
hist(df$duration,50,col="cyan",main="Duration - Histogram")
hist(df$duration,breaks=c(0,500,1000,2000,5000),col="cyan",main="Duration - Histogram")
boxplot(df$duration) # base library
library(car)
Boxplot(df$duration,labels=row.names(df)) # car library
summary(df$duration)
df[2,3]
df[2,"duration"]
# vars_num
# vars_fac
names(df)
# List with names of target variables
vars_target<-names(df)[c(11,21)];vars_target
# List with names of target variables
vars_target<-names(df)[c(11,21)];vars_target
summary(df[,vars_target])
<<<<<<< Updated upstream
hist(df$duration,100)
boxplot(df$duration)
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
out.var<-calcQ(df$duration)
abline(h=650,col="red",lwd=2)
abline(h=979,col="magenta",lwd=2)
#eliminamos las filas con NA's en las variables target (Duration & Y)
sel<-which(is.na(df$duration));sel
sel<-which(is.na(df$y));sel
summary(df)
####GUILLEM: Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names$df){levels(df$i)}
####GUILLEM: Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names$df){print(i)}
names(df)
prova=names(df)
prova
prova[1]
####GUILLEM: Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names(df)){print(i)}
####GUILLEM: Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names(df)){levels(df$i)}
levels(df$age)
levels(df$day_of_week)
####GUILLEM: Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names(df)){levels(df[,i])}
levels(df$age)
levels(df$day_of_week)
#######################GUILLEM:
#Separamos variables numéricas y de factores
vars_num<-names(df)[c(1,11:14,16:20)]
vars_fac<-names(df)[c(2:10,15,21:23)]
#######################GUILLEM:
#Separamos variables numéricas y de factores
vars_num<-names(df)[c(1,11:14,16:20)];vars_num
vars_fac<-names(df)[c(2:10,15,21:23)];vars_fac
#######################GUILLEM:
#Separamos variables numéricas y categóricas
df[1,:]
#######################GUILLEM:
#Separamos variables numéricas y categóricas
df[1,]
vars_num<-names(df)[c(1,11:14,16:20)];vars_num
vars_cat<-names(df)[c(2:10,15,21:23)];vars_cat
vars_cat<-names(df)[-vars_num];vars_cat
vars_num<-names(df)[aux];vars_num
aux <- c(1,11:14,16:20)
vars_num<-names(df)[aux];vars_num
vars_cat<-names(df)[-aux];vars_cat
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){print(i);levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){print(levels(df[i]))}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){a<-levels(df[i]);print(a)}
vars_cat<-names(df)[-aux];vars_cat
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){names(df[i]);levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names(df[,vars_cat]){names(df[i]);levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in names(df[,vars_cat])){names(df[i]);levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){names(df[i]);levels(df[i])}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){names(i);levels(i)}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){i;names(i);levels(i)}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for(i in df[,vars_cat]){print(i);names(i);levels(i)}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for (n in names(df))
if (is.factor(df[[n]])) {
print(n)
print(levels(df[[n]]))
}
aux2 <- which(df.isfactor)
aux2 <- which(df.is.factor())
aux2 <- sapply(df, is.factor)
aux2
for (n in names(df)){
if (is.factor(df[[n]])) {
vars_cat <- c(vars_cat,n)
}}
for (n in names(df)){
if (is.factor(df[[n]])) {
vars_cat <- c(vars_cat,n)
}}
aux <- c(1,11:14,16:20)
vars_num<-names(df)[which(df)];vars_num
vars_num<-names(df)[aux]];vars_num
vars_num<-names(df)[aux];vars_num
vars_cat<-names(df)[-aux];vars_cat
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
for (n in names(df)){
if (is.factor(df[[n]])) {
vars_cat2 <- c(vars_cat2,n)
}}
#Miramos qué niveles hay de cada variable para decidir qué valores son erróneos y por tanto deben ser NA's
vars_cat2 <- c()
for (n in names(df)){
if (is.factor(df[[n]])) {
vars_cat2 <- c(vars_cat2,n)
}}
vars_cat
vars_cat2
vars_num<-names(df)[-vars_cat];vars_num
aux <- c(1,11:14,16:20)
vars_num<-names(df)[aux];vars_num
vars_cat<-names(df)[-aux];vars_cat
#Analizamos variables según si son cat/num o target/no-target (obtenemos 4 clasificaciones)
#target+categorica (miramos qué nivles tiene)
levels(df['y'])
#Analizamos variables según si son cat/num o target/no-target (obtenemos 4 clasificaciones)
#target+categorica (miramos qué nivles tiene)
levels(df[,'y'])
=======
# Errors: set to NA. Ex: Duration<=0
ll<-which(df$duration<=0);ll
df$duration[ll]<-NA
summary(df[,vars_target])
help hist
hist?
exis
?hist
df(names)
names(df)
hist(df$age)
hist(df$age,breaks=c(0,500,1000,2000,5000),col="cyan",main="Duration - Histogram")
hist(df$age)
sum(is.na(df$age))
sum(is.na(df$job))
sum(is.na(df))
summary(df$age)
boxplot(df$duration) # base library
Boxplot(df$duration,labels=row.names(df)) # car library
summary(df$duration)
# age
summary(df$age)
sum(is.na(df$age))
hist(df$age,col="cyan",main="age - Histogram")
boxplot(df$age, labels=row.names(df))
# job
summary(df$job)
sum(is.na(df$job))
hist(df$job,col="cyan",main="job - Histogram")
boxplot(df$job, labels=row.names(df))
# marital
summary(df$marital)
sum(is.na(df$marital))
hist(df$marital,col="cyan",main="marital - Histogram")
boxplot(df$marital, labels=row.names(df))
# education
summary(df$education)
sum(is.na(df$education))
hist(df$education,col="cyan",main="education - Histogram")
boxplot(df$education, labels=row.names(df))
# default
summary(df$default)
sum(is.na(df$default))
hist(df$default,col="cyan",main="default - Histogram")
boxplot(df$default, labels=row.names(df))
# housing
summary(df$housing)
sum(is.na(df$housing))
hist(df$housing,col="cyan",main="housing - Histogram")
boxplot(df$housing, labels=row.names(df))
# loan
summary(df$loan)
sum(is.na(df$loan))
hist(df$loan,col="cyan",main="loan - Histogram")
boxplot(df$loan, labels=row.names(df))
# contact
summary(df$contact)
sum(is.na(df$contact))
hist(df$contact,col="cyan",main="contact - Histogram")
boxplot(df$contact, labels=row.names(df))
# month
summary(df$month)
sum(is.na(df$month))
hist(df$month,col="cyan",main="month - Histogram")
sum(is.na(df))
sum(is.na(df$age))
sum(is.na(df$job))
sum(is.na(df$marital))
sum(is.na(df$education))
sum(is.na(df$default))
sum(is.na(df$housing))
sum(is.na(df$loan))
sum(is.na(df$contact))
sum(is.na(df$month))
sum(is.na(df$day_of_week))
sum(is.na(df$duration))
library(car)
Boxplot(df$duration,labels=row.names(df)) # car library
title: "Load Data"
author: "Me"
date: "14 de febrero de 2019"
output:
word_document:
toc: yes
toc_depth: '3'
pdf_document:
number_sections: yes
toc: yes
toc_depth: '3'
html_document:
number_sections: yes
toc: yes
toc_depth: 3
editor_options:
chunk_output_type: console
---
# vars_num
# vars_fac
names(df)
# List with names of target variables
vars_target<-names(df)[c(11,21)];
# List with names of target variables
vars_target<-names(df)[c(11,21)];
vars_target<-names(df)[c(11,21)];
clc
clear
clean
delet
delete
# vars_num
# vars_fac
names(df)
# List with names of target variables
vars_target<-names(df)[c(11,21)];
vars_target
# Errors: set to NA. Ex: Duration<=0
ll<-which(df$duration<=0);ll
summary(df[,vars_target])
# age
summary(df$age)
# age
summary(df$age)
# job
summary(df$job)
sum(is.na(df$marital))
summary(df$age)
summary(df$age)
summary(df$job)
summary(df$marital)
summary(df$education)
summary(df$default)
summary(df$housing)
summary(df$loan)
summary(df$contact)
summary(df$month)
summary(df$day_of_week)
summary(df$duration)
summary(df$campaign)
summary(df$pdays)
summary(df$previous)
summary(df$poutcome)
summary(df$emp.var.rate)
summary(df$cons.price.idx)
summary(df$cons.conf.idx)
summary(df$euribor3m)
summary(df$nr.employed)
summary(df$y)
setwd("C:/Users/Sergio/Dropbox/UPC/FIB/Analisis de datos y explotacion de la informacion (ADEI)/FIB-ADEI-Big-Data-Analysis")
load("set-datos.RData", envir = parent.frame(), verbose = FALSE)
#Comprobar el tamaño de la muestra
dim(df)
#######################GUILLEM:
#Separamos variables target/no-target numéricas/categóricas (observamos un individuo cualquiera)
df[1,]
aux <- c(1,11:14,16:20)
vars_num<-names(df)[aux];vars_num
vars_cat<-names(df)[-aux];vars_cat
vars_target<-names(df)[c(11,21)];vars_target
>>>>>>> Stashed changes
#Analizamos variables según si son cat/num o target/no-target (obtenemos 4 clasificaciones)
#target+categorica (miramos qué nivles tiene)
levels(df$y) #solo hay yes/no no hay que hacer nada
#target+numerica (miramos qué valores toma)
<<<<<<< Updated upstream
summary(df$duracion)
#target+numerica (miramos qué valores toma)
summary(df$duration)
=======
summary(df$duration)#Vemos que hay valores muy pequeños, incluso 0, tambien de muy grandes.
>>>>>>> Stashed changes
hist(df$duration,100) #Miramos distribución
boxplot(df$duration) #Hacemos boxplot para ver outliers
# Some useful functions
calcQ <- function(x) {
s.x <- summary(x)
iqr<-s.x[5]-s.x[2]
list(souti=s.x[2]-3*iqr, mouti=s.x[2]-1.5*iqr, min=s.x[1], q1=s.x[2], q2=s.x[3],
q3=s.x[5], max=s.x[6], mouts=s.x[5]+1.5*iqr, souts=s.x[5]+3*iqr ) }
<<<<<<< Updated upstream
out.var<-calcQ(df$duration)
out.var<-calcQ(df$duration);out.var
abline(h=650,col="red",lwd=2) #Fijamos límite soft
abline(h=650,col="red",lwd=2) #Fijamos límite extreme
abline(h=979,col="magenta",lwd=2) #Fijamos límite soft
=======
out.var<-calcQ(df$duration);out.var
abline(h=650,col="red",lwd=2) #Fijamos límite soft
abline(h=979,col="magenta",lwd=2) #Fijamos límite extreme
>>>>>>> Stashed changes
